From 59ec627f36542896a6d839cd33796c9fa79a8b40 Mon Sep 17 00:00:00 2001
From: Pierre-Hugues Husson <phh@phh.me>
Date: Wed, 26 Oct 2022 18:02:18 -0400
Subject: [PATCH] Restore back the behavior of isValid(): It is legal to have
 non-working BpfMap. Dont abort a whole process (system_server...) just
 because we cant access bpf map. Also add isOk to include the additional
 checks for newer kernel versions

Change-Id: Ie7815c186400614f0c6b483c04aa8971af348380
---
 common/native/bpf_headers/include/bpf/BpfMap.h | 16 ++++++++++------
 1 file changed, 10 insertions(+), 6 deletions(-)

diff --git a/common/native/bpf_headers/include/bpf/BpfMap.h b/common/native/bpf_headers/include/bpf/BpfMap.h
index 51e6d162..6d74ff3a 100644
--- a/common/native/bpf_headers/include/bpf/BpfMap.h
+++ b/common/native/bpf_headers/include/bpf/BpfMap.h
@@ -54,21 +54,25 @@ class BpfMap {
 
   private:
     void abortOnKeyOrValueSizeMismatch() {
-        if (!mMapFd.ok()) abort();
-        if (isAtLeastKernelVersion(4, 14, 0)) {
-            if (bpfGetFdKeySize(mMapFd) != sizeof(Key)) abort();
-            if (bpfGetFdValueSize(mMapFd) != sizeof(Value)) abort();
-        }
+        if (!isOk()) abort();
     }
 
   protected:
     // flag must be within BPF_OBJ_FLAG_MASK, ie. 0, BPF_F_RDONLY, BPF_F_WRONLY
     BpfMap<Key, Value>(const char* pathname, uint32_t flags) {
         mMapFd.reset(mapRetrieve(pathname, flags));
-        abortOnKeyOrValueSizeMismatch();
     }
 
   public:
+    bool isOk() {
+        if (!mMapFd.ok()) return false;
+        if (isAtLeastKernelVersion(4, 14, 0)) {
+            if (bpfGetFdKeySize(mMapFd) != sizeof(Key)) return false;
+            if (bpfGetFdValueSize(mMapFd) != sizeof(Value)) return false;
+        }
+        return true;
+    }
+
     explicit BpfMap<Key, Value>(const char* pathname) : BpfMap<Key, Value>(pathname, 0) {}
 
 #ifdef BPF_MAP_MAKE_VISIBLE_FOR_TESTING
-- 
2.25.1

