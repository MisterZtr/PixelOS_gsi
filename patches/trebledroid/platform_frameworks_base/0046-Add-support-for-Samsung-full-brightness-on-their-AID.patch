From 985bf0b7a6fbcf0487d0a7ed7bc61cabe0118121 Mon Sep 17 00:00:00 2001
From: Pierre-Hugues Husson <phh@phh.me>
Date: Sun, 10 Dec 2023 18:04:49 -0500
Subject: [PATCH 46/54] Add support for Samsung full brightness on their AIDL
 HAL

---
 services/core/Android.bp                      |  4 ++
 .../android/server/lights/LightsService.java  | 40 +++++++++++++++++++
 2 files changed, 44 insertions(+)

diff --git a/services/core/Android.bp b/services/core/Android.bp
index b5b4ca301c34..577bb0693d8c 100644
--- a/services/core/Android.bp
+++ b/services/core/Android.bp
@@ -197,6 +197,10 @@ java_library_static {
         "vendor.oplus.hardware.biometrics.fingerprint-V2.1-java",
         "vendor.oppo.hardware.biometrics.fingerprint-V2.1-java",
         "vendor.xiaomi.hardware.fingerprintextension-V1.0-java",
+
+        //AIDL
+        "vendor.samsung.hardware.biometrics.fingerprint-V1-java",
+        "vendor.samsung.hardware.light-V1-java",
     ],
     javac_shard_size: 50,
     javacflags: [
diff --git a/services/core/java/com/android/server/lights/LightsService.java b/services/core/java/com/android/server/lights/LightsService.java
index 8fa9c4f3a698..390c6ac6c50f 100644
--- a/services/core/java/com/android/server/lights/LightsService.java
+++ b/services/core/java/com/android/server/lights/LightsService.java
@@ -44,8 +44,10 @@ import com.android.internal.util.DumpUtils;
 import com.android.internal.util.Preconditions;
 import com.android.server.SystemService;
 
+import java.io.File;
 import java.io.FileDescriptor;
 import java.io.PrintWriter;
+import java.nio.file.Files;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.HashMap;
@@ -53,6 +55,8 @@ import java.util.List;
 import java.util.Map;
 import java.util.function.Supplier;
 
+import vendor.samsung.hardware.light.ISehLights;
+
 public class LightsService extends SystemService {
     static final String TAG = "LightsService";
     static final boolean DEBUG = false;
@@ -63,6 +67,10 @@ public class LightsService extends SystemService {
     @Nullable
     private final Supplier<ILights> mVintfLights;
 
+    @Nullable
+    private ISehLights mSamsungLights;
+    private int mSamsungMaxBrightness;
+
     @VisibleForTesting
     final LightsManagerBinderService mManagerService;
 
@@ -297,6 +305,17 @@ public class LightsService extends SystemService {
                 int brightnessInt = BrightnessSynchronizer.brightnessFloatToInt(brightness);
 
                 if(mHwLight.id == 0) {
+                    if (mSamsungLights != null && SystemProperties.getBoolean("persist.sys.samsung.full_brightness", false)) {
+                        HwLightState lightState = new HwLightState(); // don't care
+                        try {
+                            int v = (int)Math.round(brightness * mSamsungMaxBrightness);
+                            mSamsungLights.setLightState(mHwLight.id, lightState, v);
+                            Slog.e("PHH", "Set sammy brightness to " + v);
+                        } catch(Throwable t) {
+                            Slog.e("PHH", "Failed setting samsung brightness", t);
+                        }
+                        return;
+                    }
                     String fp = SystemProperties.get("ro.vendor.build.fingerprint", "hello");
                     if(fp.matches(".*astarqlte.*")) {
                         int newBrightness = brightnessInt;
@@ -499,6 +518,27 @@ public class LightsService extends SystemService {
         mH = new Handler(looper);
         mVintfLights = service.get() != null ? service : null;
 
+        if (service.get() != null) {
+            try {
+                mSamsungLights = ISehLights.Stub.asInterface(service.get().asBinder().getExtension());
+                mSamsungMaxBrightness = 510;
+
+                ArrayList<File> paths = new ArrayList<>();
+                paths.add(new File("/sys/class/backlight/panel/max_brightness"));
+                paths.add(new File("/sys/class/backlight/panel0-backlight/max_brightness"));
+                paths.add(new File("/sys/devices/platform/soc/soc:mtk_leds/leds/lcd-backlight/max_brightness"));
+                for(File f: paths) {
+                    try {
+                        List<String> lines = Files.readAllLines(f.toPath());
+                        mSamsungMaxBrightness = Integer.parseInt(lines.get(0));
+                        Slog.e("PHH", "" + f + " gave us " + mSamsungMaxBrightness);
+                    } catch(Throwable t) {}
+                }
+            } catch(Throwable t) {
+                Slog.e("PHH", "Failed getting Samsung lights AIDL", t);
+            }
+        }
+
         populateAvailableLights(context);
         mManagerService = new LightsManagerBinderService();
     }
--
2.25.1
